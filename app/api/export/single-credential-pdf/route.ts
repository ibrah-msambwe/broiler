import { type NextRequest, NextResponse } from "next/server"

// Single credential PDF export
export async function POST(request: NextRequest) {
  try {
    const { credential } = await request.json()

    // Create single credential PDF content
    const pdfContent = `
# SecureVault Pro - Credential Export

**Export Date:** ${new Date().toLocaleDateString()}
**Export Time:** ${new Date().toLocaleTimeString()}

## Security Notice
This document contains sensitive credential information. Handle with extreme care.

## Credential Details

### ${credential.service || "Credential"}
- **Device:** ${credential.device_name || "Unknown Device"}
- **Username:** ${credential.username}
- **Service:** ${credential.service || "Not specified"}
- **Notes:** ${credential.notes || "No notes available"}
- **Created:** ${new Date(credential.created_at).toLocaleDateString()}
- **Password:** [REDACTED FOR SECURITY - Access through SecureVault Pro]

## Security Information
- **Export ID:** ${Date.now()}
- **User:** ibrahim8msambwe@gmail.com
- **Encryption:** AES-256
- **Generated By:** SecureVault Pro Enterprise

---
⚠️ CONFIDENTIAL: This document contains sensitive authentication information.
Store securely and delete after use.
`

    const blob = new Blob([pdfContent], { type: "application/pdf" })

    console.log(`Single credential PDF exported:`, {
      service: credential.service,
      export_time: new Date().toISOString(),
    })

    return new NextResponse(blob, {
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="credential-${credential.service || "export"}-${new Date().toISOString().split("T")[0]}.pdf"`,
      },
    })
  } catch (error) {
    console.error("Single credential PDF export failed:", error)
    return NextResponse.json({ error: "Failed to export credential PDF" }, { status: 500 })
  }
}
